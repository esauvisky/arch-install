[Commands]
1\Command="/**\n * Cycles through and pastes the next item in the list sequentially.\n * This function is designed for efficient sequential pasting of items.\n *\n * Key Features:\n * - Does not alter the order of items in the list.\n * - Works with any mime type.\n * - Automatically starts at row 0 if the first item is selected.\n * - Ignores multiple row selections; only operates when a single item is selected.\n *\n * Usage:\n * - Bind `copyq pasteNext` to a global shortcut, such as Super+V.\n * - Copy multiple items in sequence.\n * - Press Super+V repeatedly to paste each item in turn.\n */\n\nglobal.pasteNext = function () {\n    const items = selectedItems();\n    if (items.length != 1) return;\n    const ix = items[0];\n\n    tab(selectedtab())\n    if (ix === 0) {\n        print(\"Pasting first item\");\n        paste();\n        selectItems([ix + 1]);\n        return;\n    }\n    print(`Selecting index ${ix + 1}`);\n    selectItems([ix + 1]);\n    item = selectedItemsData()[0]\n    copy(item)\n    paste()\n}\n\n"
1\GlobalShortcut=alt+shift+v
1\Icon=\xe4bb
1\IsGlobalShortcut=true
1\IsScript=true
1\Name=Paste Next
2\Command="// Pops up the main window (if the shortcut is pressed once)\n// If the shortcut is pressed again, walks through the list\n// and immediately activates the selected item when releeased.\n\n// Bind shortcuts similar to:\n// - Super+Q = copyq cycle false\n// - Super+Shift+Q = copyq cycle true\n\nglobal.cycle = function(oppositeDirection) {\n    if (focused()) {\n        const sel = ItemSelection().current();\n        const rows = sel.rows();\n        var direction = Number(settings('cycleItemsSelectDirection'));\n\n        // Toggle direction based on the oppositeDirection flag\n        direction = oppositeDirection ? -direction : direction;\n\n        var row = rows.length > 0 ? (rows[0] + direction) : 0;\n        if (row < 0 || row >= length()) {\n            row = (rows.length > 0) ? (rows[0] + direction) : 0; // ensure row recalculates correctly\n        }\n        settings('cycleItemsSelectedRow', row);\n        settings('cycleItemsSelectedTab', selectedTab());\n        selectItems(row);\n    } else {\n        settings('cycleItemsSelectedRow', -1);\n        settings('cycleItemsSelectDirection', 1);\n        show();\n        // Wait for shortcut modifiers to be released.\n        while (queryKeyboardModifiers().length > 0) {\n            sleep(20);\n        }\n        const row = settings('cycleItemsSelectedRow');\n        if (row != -1) {\n            tab(settings('cycleItemsSelectedTab'));\n            select(row);\n            hide();\n            // uncomment this to also paste:'cycleItemsSelectDirection'// uncomment this to also paste\n            // paste()\n        }\n    }\n};\n"
2\Icon=\xf1b8
2\IsScript=true
2\Name=Cycle Items
3\Command="global.cleanupClipboard = function () {// Script to delete the 100 largest items from the current tab\n\ncopyq:\nvar itemsToDelete = 100;\n\n// Create a selection of all items in the current tab\nvar sel = ItemSelection(selectedTab()).selectAll();\n\n// Get all items and their sizes\nvar items = sel.items();\nvar itemSizes = items.map(function(item, index) {\n    return {\n        index: index,\n        size: str(item[mimeText]).length\n    };\n});\n\n// Sort items by size (descending)\nitemSizes.sort(function(a, b) {\n    return b.size - a.size;\n});\n\n// Select and remove the largest 100 items\nvar largestItemsSel = ItemSelection(selectedTab());\nfor (var i = 0; i < Math.min(itemsToDelete, itemSizes.length); i++) {\n    select(itemSizes[i].index);\n}\n//largestItemsSel.removeAll();\n\n// Print the number of removed items\nprint(\"Removed \" + selection.length + \" largest items.\");\n}"
3\Icon=\xef\xbf\xbd\x34\x36
3\IsScript=true
3\Name=Delete 200 Biggest Items
4\Automatic=true
4\Command="copyq:\nvar time = Date.now()\nsetData('application/x-copyq-user-copy-time', time)\n\n//var tagsMime = 'application/x-copyq-tags'\n//var tags = str(data(tagsMime)) + ', ' + time\n//setData(tagsMime, tags)"
4\Icon=\xf017
4\Name=Store Copy Time
5\Command="copyq:\nvar selectedItem1 = selectedItemData(0)[mimeText]\nvar selectedItem2 = selectedItemData(1)[mimeText]\n\nvar item1 = null\nvar item2 = null\n\nif (selectedItem2 == undefined) {\n    // the selected item either doesn't contain text\n    // or the command is run as global shortcut.\n    // select the last two clipboard in this case.\n    item1 = read(1)\n    item2 = read(0)\n} else {\n    item1 = selectedItem1\n    item2 = selectedItem2\n}\n\nfunction tempFile(content) {\n    var file = new TemporaryFile()\n    file.openWriteOnly()\n    file.write(content)\n    file.close()\n    return file\n}\n\nvar f1 = tempFile(item1)\nvar f2 = tempFile(item2)\nvar name1 = f1.fileName()\nvar name2 = f2.fileName()\n\nexecute('meld', name1, name2)\n\nsleep(100)"
5\GlobalShortcut=ctrl+alt+shift+d
5\Icon=\xf0db
5\InMenu=true
5\IsGlobalShortcut=true
5\Name=Diff Latest Items
6\Command="/**\n * Transforms clipboard contents into a Markdown formatted code block and optionally replaces the clipboard's contents.\n * \n * @param {string} MODE - Controls how the formatted code block is handled:\n *    - \"replace\": Replaces the clipboard content with the newly formatted code block.\n *    - \"copy\": Copies the newly formatted code block without replacing the existing content.\n * \n * Usage Example:\n * - Set a global shortcut that calls `copyq codeblock replace`\n * - Copy some code\n * - Press the shortcut\n * - Paste\n */\nglobal.codeblock = function(mode = 'copy') {\n    // Step 1: Check the clipboard content\n    var contents = str(clipboard());\n    if (!contents || (contents.trim().startsWith(\"```\") && contents.trim().endsWith(\"```\"))) {\n        abort();\n    }\n\n    // Step 2: Detect language\n    function detectLanguage(text) {\n        const patterns = {\n            \"python\":     /\\bdef\\s+\\w+\\s*\\(|\\bimport\\s+\\w+|\\bprint\\s*\\(|#!\\/usr\\/bin\\/env\\s+python|\\bfrom\\s+\\w+/,\n            \"javascript\": /\\s*\\/\\*\\*\\s*\\n|\\bfunction\\s+\\w+\\s*\\(|\\bvar\\s+\\w+\\s*=\\s*|\\bconst\\s+\\w+\\s*=\\s*|\\blet\\s+\\w+\\s*=\\s*/,\n            \"json\":       /\\{\\s*(?:(?:(?:\"[^\"]\"\\s:\\s*(?:\"[^\"]\"|\\d+|true|false|null|\\{[^}]\\}|\\[[^\\]]\\]))\\s,\\s*)(?:\"[^\"]\"\\s*:\\s*(?:\"[^\"]\"|\\d+|true|false|null|\\{[^}]\\}|\\[[^\\]]\\]))\\s)?\\}/,\n            \"html\":       /<html>|<body>|<div>|<span>|<script>|<\\/html>|<\\/body>/,\n            \"php\":        /<\\?php|\\barray\\s*\\(|\\bfunction\\s+\\w+\\s*\\(/,\n            \"csharp\":     /\\busing\\s+System;|\\bpublic\\s+class\\b|\\bnamespace\\s+\\w+/,\n            \"cpp\":        /\\b(?:include\\s+<[^>]+>|std::|int\\s+main\\s*\\()|(?:\\bclass\\s+\\w+|\\bnamespace\\s+\\w+|\\btemplate\\s*<[^>]*>|\\bstruct\\s+\\w+|\\bpublic:|\\bprivate:|\\bprotected:|\\busing\\s+namespace\\s+\\w+)/,\n            \"java\":       /\\bpublic\\s+class\\b|\\bimport\\s+java\\.\\w+/,\n            \"go\":         /\\bpackage\\s+\\w+|\\bfunc\\s+\\w+\\s*\\(|\\bimport\\s+\"\\w+\"/,\n            \"yaml\":       /^(\\s*-\\s+[\\w]+|[\\w-]+:\\s*[\\w\\s\\-]+|^(\\s*[\\w-]+:\\s+[\\w\\s\\-]+)|^\\s*[\\w-]+:\\s*.*)/,\n            \"markdown\":   /#+\\s|\\*\\s|- \\s|\\d+\\. \\s/,\n            \"css\":        /\\b[a-z-]+\\s*:\\s*[^;]+;/,\n            \"bash\":       /#!\\/bin\\/bash|^(\\s*#.|\\s*if\\s+|^\\s*then\\s+|\\s*fi\\s+|\\s*else\\s+|\\s*for\\s+|\\s*while\\s+|\\s*do\\s+|^s*done\\s|\\s*&&\\s+|\\s*\\|\\|\\s+|\\s*case\\s+|\\s*esac\\s+|\\s*echo\\s+|^s*printf\\s+|^s*export\\s+|^s*declare\\s+|^s*unset\\s+|^s*source\\s+|\\s*\\$\\[\\w\\]+|\\s*\\$\\(|\\s*\\`|\\s*\\$!)/,\n        };\n\n        for (const lang in patterns) {\n            if (patterns[lang].test(text)) {\n                return lang;\n            }\n        }\n        return \"\"; // Default if no specific language is detected\n    }\n\n    function escapeSpecialChars(str) {\n        return str.replace(/`/g, \"`\");\n        //.replace(/\\\\/g, '\\\\\\\\')\n        //.replace(/'/g, \"\\\\'\")\n        //.replace(/\"/g, '\\\\\"')\n        //.replace(/\\$/g, '\\\\$');\n    }\n\n    // Step 3: Remove extra indentation and show the result\n    function removeExtraIndentation(text) {\n        const lines = text.split(\"\\n\");\n        // Filter out empty lines so we dont use them for accounting for indentation\n        const nonEmptyLines = lines.filter((line) => line.trim() !== \"\");\n        \n        // Find the minimum indentation in common for all lines\n        const minIndentation = Math.min(...nonEmptyLines.map((line) => {\n            const leadingSpaces = line.match(/^\\s*/)[0].length;\n            return leadingSpaces;\n        }));\n\n        const trimmedLines = lines.map((line) => line.substring(minIndentation));\n        return trimmedLines.join(\"\\n\");\n    }\n\n    const language = detectLanguage(contents);\n    contents = removeExtraIndentation(contents).trim();\n    contents = escapeSpecialChars(contents);\n    // print('Formatted Text: ', clipboard);\n    const formattedText = `\\`\\`\\`${language}\\n${contents}\\n\\`\\`\\``;\n    // print('Final Text: ', formattedText);\n\n    // Replaces the last clipboard contents with the codeblocked contents permanently\n    if (mode == \"replace\") {\n        remove(index());\n        add(formattedText);\n        write(index(), formattedText);\n    }\n\n    copy(formattedText);\n    copySelection(formattedText)\n};\n"
6\Icon=\xf06b
6\IsScript=true
6\Name=Wrap Current Clipboard in Codeblock
7\Automatic=true
7\Command="copyq:\nconst selectionTab = '&Primary Selection';\nconst imageTab = '&Images';\n\nfunction hasImageFormat(formats) {\n    for (const format of formats.values()) {\n        if (format.startsWith('image/'))\n            return true;\n    }\n    return false;\n}\n\n// Runs only for clipboard changes (i.e.: not primary selection)\nif (isClipboard()) {\n    const formats = dataFormats();\n    if (hasImageFormat(formats)) {\n        setData(mimeOutputTab, imageTab);\n    }\n    setCurrentTab(data(mimeOutputTab))\n} else {\n    setData(mimeOutputTab, selectionTab);\n}"
7\Icon=\xf15b
7\Name=Move to Tab
size=7
