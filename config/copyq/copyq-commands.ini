[Commands]
1\Command="copyq:\nfunction getItemSize(item) {\n    var size = 0;\n    for (var format in item) {\n        size += item[format].size();\n    }\n    return size;\n}\n\nvar sel = ItemSelection(selectedTab());\nvar items = sel.itemsData();\nvar itemSizes = items.map(function(item, index) {\n    return {index: index, size: getItemSize(item)};\n});\n\nitemSizes.sort(function(a, b) {\n    return b.size - a.size;\n});\n\nvar indexesToRemove = itemSizes.slice(0, 20).map(function(item) {\n    return item.index;\n});\n\nsel.selectIndexes(indexesToRemove);\nsel.removeSelected();\n"
1\Icon=\xef\xbf\xbd\x34\x36
1\InMenu=true
1\Name=Delete 200 Biggest Items
2\Automatic=true
2\Icon=\xf03e
2\Input=image/png
2\Name=Tab for Images
2\Remove=true
2\Tab=&Images
3\Command="const selectionTab = '&Primary Selection';\n\nvar onClipboardChanged_ = onClipboardChanged;\nonClipboardChanged = function() {\n    if (!isClipboard()) {\n        setData(mimeOutputTab, selectionTab);\n    }\n    onClipboardChanged_();\n}"
3\Icon=\xe185
3\IsScript=true
3\Name=Tab for Primary Selection
4\Automatic=true
4\Command="copyq:\nvar time = Date.now()\nsetData('application/x-copyq-user-copy-time', time)\n\n//var tagsMime = 'application/x-copyq-tags'\n//var tags = str(data(tagsMime)) + ', ' + time\n//setData(tagsMime, tags)"
4\Icon=\xf017
4\Name=Store Copy Time
5\Command="\ncopyq:\nvar pasteFlag = 'application/x-copyq-paste-flag';\n\n// Function to find the next item to paste\nfunction findNextItemToPaste() {\n    for (var i = 0; i < count(); ++i) {\n        // Check if item is already pasted\n        var isPasted = str(read(pasteFlag, i)) === 'true';\n        print(`Item number ${i} has isPasted = ${isPasted}`)\n        if (!isPasted) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n// Main function to cycle and paste items\nfunction cycleAndPaste() {\n    tab(selectedtab())\n    var index = findNextItemToPaste();\n    print(`\\nSelecting item index ${index}`)\n    selectItems(index);\n    setData(pasteFlag, \"true\")\n    item = getItem(index)\n    print(`\\nPasting next item ${index}: \\n` + JSON.stringify(item));\n    copy(item);\n    paste();\n    print(\"\\nItem data:\\n\" + JSON.stringify(item) + \"\\n\\n\")\n    sleep(10)\n}\n\nglobal.pasteCycle = cycleAndPaste;"
5\GlobalShortcut=alt+shift+v
5\Icon=\xe4bb
5\IsGlobalShortcut=true
5\IsScript=true
5\Name=Paste Cycle Items
6\Command="/**\n * Transforms clipboard contents into a Markdown formatted code block and optionally replaces the clipboard's contents.\n * \n * @param {string} MODE - Controls how the formatted code block is handled:\n *    - \"replace\": Replaces the clipboard content with the newly formatted code block.\n *    - \"copy\": Copies the newly formatted code block without replacing the existing content.\n * \n * Usage Example:\n * - Set a global shortcut that calls `copyq codeblock replace`\n * - Copy some code\n * - Press the shortcut\n * - Paste\n */\nglobal.codeblock = function(mode = 'copy') {\n    // Step 1: Check the clipboard content\n    var contents = str(clipboard());\n    if (!contents || (contents.trim().startsWith(\"```\") && contents.trim().endsWith(\"```\"))) {\n        abort();\n    }\n\n    // Step 2: Detect language\n    function detectLanguage(text) {\n        const patterns = {\n            \"python\":     /\\bdef\\s+\\w+\\s*\\(|\\bimport\\s+\\w+|\\bprint\\s*\\(|#!\\/usr\\/bin\\/env\\s+python|\\bfrom\\s+\\w+/,\n            \"javascript\": /\\s*\\/\\*\\*\\s*\\n|\\bfunction\\s+\\w+\\s*\\(|\\bvar\\s+\\w+\\s*=\\s*|\\bconst\\s+\\w+\\s*=\\s*|\\blet\\s+\\w+\\s*=\\s*/,\n            \"json\":       /\\{\\s*(?:(?:(?:\"[^\"]\"\\s:\\s*(?:\"[^\"]\"|\\d+|true|false|null|\\{[^}]\\}|\\[[^\\]]\\]))\\s,\\s*)(?:\"[^\"]\"\\s*:\\s*(?:\"[^\"]\"|\\d+|true|false|null|\\{[^}]\\}|\\[[^\\]]\\]))\\s)?\\}/,\n            \"html\":       /<html>|<body>|<div>|<span>|<script>|<\\/html>|<\\/body>/,\n            \"php\":        /<\\?php|\\barray\\s*\\(|\\bfunction\\s+\\w+\\s*\\(/,\n            \"csharp\":     /\\busing\\s+System;|\\bpublic\\s+class\\b|\\bnamespace\\s+\\w+/,\n            \"cpp\":        /\\b(?:include\\s+<[^>]+>|std::|int\\s+main\\s*\\()|(?:\\bclass\\s+\\w+|\\bnamespace\\s+\\w+|\\btemplate\\s*<[^>]*>|\\bstruct\\s+\\w+|\\bpublic:|\\bprivate:|\\bprotected:|\\busing\\s+namespace\\s+\\w+)/,\n            \"java\":       /\\bpublic\\s+class\\b|\\bimport\\s+java\\.\\w+/,\n            \"go\":         /\\bpackage\\s+\\w+|\\bfunc\\s+\\w+\\s*\\(|\\bimport\\s+\"\\w+\"/,\n            \"yaml\":       /^(\\s*-\\s+[\\w]+|[\\w-]+:\\s*[\\w\\s\\-]+|^(\\s*[\\w-]+:\\s+[\\w\\s\\-]+)|^\\s*[\\w-]+:\\s*.*)/,\n            \"markdown\":   /#+\\s|\\*\\s|- \\s|\\d+\\. \\s/,\n            \"css\":        /\\b[a-z-]+\\s*:\\s*[^;]+;/,\n            \"bash\":       /#!\\/bin\\/bash|^(\\s*#.|\\s*if\\s+|^\\s*then\\s+|\\s*fi\\s+|\\s*else\\s+|\\s*for\\s+|\\s*while\\s+|\\s*do\\s+|^s*done\\s|\\s*&&\\s+|\\s*\\|\\|\\s+|\\s*case\\s+|\\s*esac\\s+|\\s*echo\\s+|^s*printf\\s+|^s*export\\s+|^s*declare\\s+|^s*unset\\s+|^s*source\\s+|\\s*\\$\\[\\w\\]+|\\s*\\$\\(|\\s*\\`|\\s*\\$!)/,\n        };\n\n        for (const lang in patterns) {\n            if (patterns[lang].test(text)) {\n                return lang;\n            }\n        }\n        return \"\"; // Default if no specific language is detected\n    }\n\n    function escapeSpecialChars(str) {\n        return str.replace(/`/g, \"`\");\n        //.replace(/\\\\/g, '\\\\\\\\')\n        //.replace(/'/g, \"\\\\'\")\n        //.replace(/\"/g, '\\\\\"')\n        //.replace(/\\$/g, '\\\\$');\n    }\n\n    // Step 3: Remove extra indentation and show the result\n    function removeExtraIndentation(text) {\n        const lines = text.split(\"\\n\");\n        // Filter out empty lines so we dont use them for accounting for indentation\n        const nonEmptyLines = lines.filter((line) => line.trim() !== \"\");\n        \n        // Find the minimum indentation in common for all lines\n        const minIndentation = Math.min(...nonEmptyLines.map((line) => {\n            const leadingSpaces = line.match(/^\\s*/)[0].length;\n            return leadingSpaces;\n        }));\n\n        const trimmedLines = lines.map((line) => line.substring(minIndentation));\n        return trimmedLines.join(\"\\n\");\n    }\n\n    const language = detectLanguage(contents);\n    contents = removeExtraIndentation(contents).trim();\n    contents = escapeSpecialChars(contents);\n    // print('Formatted Text: ', clipboard);\n    const formattedText = `\\`\\`\\`${language}\\n${contents}\\n\\`\\`\\``;\n    // print('Final Text: ', formattedText);\n\n    // Replaces the last clipboard contents with the codeblocked contents permanently\n    if (mode == \"replace\") {\n        remove(index());\n        add(formattedText);\n        write(index(), formattedText);\n    }\n\n    copy(formattedText);\n    copySelection(formattedText)\n};\n"
6\Icon=\xf06b
6\IsScript=true
6\Name=Wrap Current Clipboard in Codeblock
7\Command="copyq:\nvar selectedItem1 = selectedItemData(0)[mimeText]\nvar selectedItem2 = selectedItemData(1)[mimeText]\n\nvar item1 = null\nvar item2 = null\n\nif (selectedItem2 == undefined) {\n    // the selected item either doesn't contain text\n    // or the command is run as global shortcut.\n    // select the last two clipboard in this case.\n    item1 = read(1)\n    item2 = read(0)\n} else {\n    item1 = selectedItem1\n    item2 = selectedItem2\n}\n\nfunction tempFile(content) {\n    var file = new TemporaryFile()\n    file.openWriteOnly()\n    file.write(content)\n    file.close()\n    return file\n}\n\nvar f1 = tempFile(item1)\nvar f2 = tempFile(item2)\nvar name1 = f1.fileName()\nvar name2 = f2.fileName()\n\nexecute('meld', name1, name2)\n\nsleep(100)"
7\GlobalShortcut=ctrl+alt+shift+d
7\Icon=\xf0db
7\InMenu=true
7\IsGlobalShortcut=true
7\Name=Diff Latest Items
size=7
