[Commands]
1\Command="const _print = global.print;\nglobal.print = function(arg) {\n    popup(arg);\n    _print(arg + \"\\n\");\n}\n\nglobal.popup = function(title, message) {\n    var commandArgs = [\"notify-send\", \"-t\", \"50\", \"-i\", \"copyq\", \"-a\", \"Clipboard\", \"-e\"];\n    commandArgs.push(title)\n    if (message) { commandArgs.push(message) };\n    var out = execute.apply(null, commandArgs);\n}\n\nconst selectionTab = '&Primary Selection';\nconst imageTab = '&Images';\nconst timeFormat = 'MM-dd hh:mm:ss'\nconst tagsMime = 'application/x-copyq-tags';\n\nvar onClipboardChanged_ = onClipboardChanged;\nonClipboardChanged = function() {\n    // Runs only for clipboard changes (i.e.: not primary selection)\n    if (isClipboard()) {\n        var time = Date.now()\n        setData('application/x-copyq-user-copy-time', time)\n        let tags = dateString(timeFormat); // Existing time stamp tag\n\n        const formats = dataFormats();\n        if (hasImageFormat(formats)) {\n            setData(mimeOutputTab, imageTab);\n        } else {\n            // Only sets timestamp tag for non images because\n            // of a bug that prevents tagged images to display\n            // the thumbnail\n            const clipboardText = str(read(\"text/plain\"));\n            const languageDetected = detectLanguage(clipboardText);\n            if (languageDetected) {\n                tags += \",\" + languageDetected;\n            }\n            setData(tagsMime, tags);\n        }\n        setCurrentTab(data(mimeOutputTab))\n    } else {\n        setData(mimeOutputTab, selectionTab);\n    }\n\n    onClipboardChanged_();\n}\n\nglobal.hasImageFormat = function(formats) {\n    for (const format of formats.values()) {\n        if (format.startsWith('image/'))\n            return true;\n    }\n    return false;\n}\n\nglobal.detectLanguage = function(text) {\n    const patterns = {\n        \"python\": /\\bdef\\s+\\w+\\s*\\(|\\bimport\\s+\\w+|\\bprint\\s*\\(|#!\\/usr\\/bin\\/env\\s+python|\\bfrom\\s+\\w+/gi,\n        \"javascript\": /\\bfunction\\s+\\w+\\s*\\(|\\bvar\\s+\\w+\\s*=\\s*|\\bconst\\s+\\w+\\s*=\\s*|\\blet\\s+\\w+\\s*=\\s*|console\\.log\\(/gi,\n        \"json\": /{(?:\\s*\"(?:\\\\.|[^\"\\\\])*\"\\s*:\\s*(?:\"(?:\\\\.|[^\"\\\\])*\"|(?:\\btrue\\b|\\bfalse\\b|\\bnull\\b)|\\d+|\\[\\]|\\{\\})\\s*,?)*}/gi,\n        \"html\": /<(?:html|body|div|span|script|head)[\\s>]|<\\/(?:html|body|div|span|script|head)>/gi,\n        \"php\": /<\\?php|\\barray\\s*\\(|\\bfunction\\s+\\w+\\s*\\(/gi,\n        \"csharp\": /\\busing\\s+System;|\\bpublic\\s+class\\b|\\bnamespace\\s+\\w+/gi,\n        \"cpp\": /\\b#include\\s+<[^>]+>|std::|int\\s+main\\s*\\(|\\bcout\\s*<</gi,\n        \"java\": /\\bpublic\\s+class\\b|\\bimport\\s+java\\.\\w+|\\bSystem\\.out\\.println\\(/gi,\n        \"go\": /\\bpackage\\s+\\w+|\\bfunc\\s+\\w+\\s*\\(|\\bimport\\s+\"\\w+\"/gi,\n        \"yaml\": /^(\\s*-\\s*[\\w]+|[\\w-]+:\\s*[\\w\\s\\-]+|^(\\s*[\\w-]+:\\s+[\\w\\s\\-]+)|^\\s*[\\w-]+:\\s*)/gim,\n        \"markdown\": /#+\\s|\\*\\s|- \\s|\\d+\\. \\s|\\[.*\\]\\(.*\\)/gi,\n        \"css\": /\\b[a-z-]+\\s*:\\s*[^;]+;/gi,\n        \"bash\": /#!\\/bin\\/bash|^\\s*#|^\\s*if\\s+|^\\s*then\\s+|^\\s*fi\\s+|^\\s*else\\s+|^\\s*for\\s+|^\\s*while\\s+|^\\s*do\\s+|^\\s*done\\s+|^\\s*&&\\s+|\\s*\\|\\|\\s+|\\s*case\\s+|\\s*esac\\s+|\\s*echo\\s+|^\\s*printf\\s+|^\\s*export\\s+|^\\s*declare\\s+|^\\s*unset\\s+|^\\s*source\\s+|\\s*\\$\\[\\w\\]+|\\s*\\$\\(|\\s*\\`|\\s*\\$!/gi,\n    };\n\n    let maxCount = 0;\n    let detectedLanguage = \"\";\n\n    for (const lang in patterns) {\n        const count = (text.match(patterns[lang]) || []).length;\n        if (count > maxCount) {\n            maxCount = count;\n            detectedLanguage = lang;\n        }\n    }\n\n    return detectedLanguage; // Return the language with the highest count of matches\n}\n"
1\Icon=\xf15b
1\IsScript=true
1\Name=Globals and Overrides
10\Command="copyq:\nvar snippetsTabName = 'Snippets'\n// List snippets instead of search combo box?\nvar listSnippets = true\n\nfunction newVarRe(content) {\n  return new RegExp('\\\\${' + content + '}', 'g')\n}\n\nfunction getText(item, format) {\n  return str(item[format] || '')\n}\n\nfunction assignPlaceholder(snippet, placeholder, value) {\n  return snippet.replace(newVarRe(placeholder + ':?.*?'), value)\n}\n\nfunction fuzzyIndexOf(snippetNames, snippetName) {\n    var re = new RegExp(snippetName, 'i')\n    for (var i in snippetNames) {\n      if (snippetNames[i].match(re))\n        return i;\n    }\n    return -1\n}\n\nfunction loadSnippets(snippetNames, snippets)\n{\n  var tabs = tab()\n  for (var i in tabs) {\n    var tabName = tabs[i];\n    if (tabName != snippetsTabName && tabName.indexOf(snippetsTabName + '/') != 0)\n      continue;\n\n    tab(tabName)\n    var prefix = tabName.substring(snippetsTabName.length + 1)\n    if (prefix)\n      prefix += ': '\n    for (var j = 0; j < size(); ++j) {\n      var snippet = getitem(j)\n      var snippetName = getText(snippet, mimeItemNotes)\n          || getText(snippet, mimeText)\n          || getText(snippet, mimeHtml)\n      snippetNames.push(prefix + snippetName)\n      snippets.push(snippet)\n    }\n  }\n}\n\nfunction askForSnippet(snippetNames, snippets) {\n  var list = listSnippets ? '.list:' : ''\n\n  var settingsPrefix = 'snippets/'\n\n  var optSnippet = 'Snippet'\n  var snippetName = settings(settingsPrefix + optSnippet)\n\n  var snippet = dialog(\n    '.title', 'Select Snippet',\n    '.defaultChoice', snippetName,\n    list + optSnippet, snippetNames\n  )\n\n  if (snippet === undefined) {\n    abort()\n  }\n\n  settings(settingsPrefix + optSnippet, listSnippets ? snippetNames[snippet] : snippet)\n\n  if (listSnippets)\n      return snippets[snippet]\n\n  var i = snippetNames.indexOf(snippet)\n  if (i != -1)\n    return snippets[i]\n\n  i = fuzzyIndexOf(snippetNames, snippet)\n  if (i != -1)\n    return snippets[i]\n\n  popup(\n    'Snippet Not Found',\n    'No matching snippet found for \"' + snippetName + '\"!'\n  )\n  abort()\n}\n\nfunction getPlaceholders(snippet) {\n  var placeholders = {}\n  var m\n  var reVar = newVarRe('([^:}]*):?(.*?)')\n  while ((m = reVar.exec(snippet)) !== null) {\n    if (!(m[1] in placeholders))\n      placeholders[m[1]] = m[2].replace('\\\\n', '\\n')\n  }\n\n  return placeholders\n}\n\nfunction assignPlaceholders(text, values) {\n  if (!(values instanceof Object)) {\n    text = assignPlaceholder(text, '.*?', values)\n  } else {\n    for (var name in values)\n      text = assignPlaceholder(text, name, values[name])\n  }\n\n  return text\n}\n\nfunction askToAssignPlaceholders(snippet, format, values) {\n  var text = getText(snippet, format)\n  var placeholders = getPlaceholders(text)\n\n  if (Object.keys(placeholders).length < 1)\n    return\n\n  if (values) {\n    snippet[format] = assignPlaceholders(text, values)\n    return values\n  }\n\n  var label = escapeHtml(text)\n    .replace(newVarRe('([^:}]*).*?'), '<b>$1</b>')\n\n  var dialogVars = [\n    '.title', 'Set Snippet Values',\n    '.label', label\n  ]\n\n  for (var name in placeholders) {\n    var values = placeholders[name].split(',')\n    dialogVars.push(name)\n    dialogVars.push((values.length == 1) ? values[0] : values)\n  }\n\n  var values = dialog.apply(this, dialogVars) || abort()\n  snippet[format] = assignPlaceholders(text, values)\n  return values\n}\n\nfunction pasteSnippet(mime, content) {\n  copy(mime, content)\n  copySelection(mime, content)\n  paste()\n}\n\nvar snippetNames = []\nvar snippets = []\nloadSnippets(snippetNames, snippets)\n\nvar snippet = askForSnippet(snippetNames, snippets)\n\nvalues = askToAssignPlaceholders(snippet, mimeText)\naskToAssignPlaceholders(snippet, mimeHtml, values)\n\npasteSnippet(mimeItems, pack(snippet))"
10\Enable=false
10\GlobalShortcut=ctrl+alt+shift+x
10\Icon=\xf1fb
10\IsGlobalShortcut=true
10\Name=Snippets
11\Command=copyq: plugins.itemtags.tag()
11\Enable=false
11\Icon=\xf02b
11\InMenu=true
11\InternalId=copyq_tags_tag
11\Name=Add a Tag
12\Command=copyq: plugins.itemtags.untag()
12\Enable=false
12\Icon=\xf02b
12\InMenu=true
12\Input=application/x-copyq-tags
12\InternalId=copyq_tags_untag
12\Name=Remove a Tag
13\Command=copyq: plugins.itemtags.clearTags()
13\Enable=false
13\Icon=\xf02b
13\InMenu=true
13\Input=application/x-copyq-tags
13\InternalId=copyq_tags_clear
13\Name=Clear all tags
14\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('python')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('python'))
14\Icon=\xf02b
14\InMenu=true
14\InternalId=copyq_tags_tag:python
14\Name=Toggle Tag \x201cpython\x201d
15\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('javascript')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('javascript'))
15\Icon=\xf02b
15\InMenu=true
15\InternalId=copyq_tags_tag:javascript
15\Name=Toggle Tag \x201cjavascript\x201d
16\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('golang')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('golang'))
16\Icon=\xf02b
16\InMenu=true
16\InternalId=copyq_tags_tag:golang
16\Name=Toggle Tag \x201cgolang\x201d
17\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('html')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('html'))
17\Icon=\xf02b
17\InMenu=true
17\InternalId=copyq_tags_tag:html
17\Name=Toggle Tag \x201chtml\x201d
18\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('markdown')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('markdown'))
18\Icon=\xf02b
18\InMenu=true
18\InternalId=copyq_tags_tag:markdown
18\Name=Toggle Tag \x201cmarkdown\x201d
19\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('java')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('java'))
19\Icon=\xf02b
19\InMenu=true
19\InternalId=copyq_tags_tag:java
19\Name=Toggle Tag \x201cjava\x201d
2\Automatic=true
2\Command="copyq:\nvar waitMs = 1500;\n\nvar start = Date.now();\nwhile (queryKeyboardModifiers().length > 0\n       && Date.now() - start < waitMs) { }\n\nif (queryKeyboardModifiers().length > 0) {\n    popup(\"Copied as secret\");\n    ignore();\n}"
2\Icon=\xf070
2\Name=Copy Secrets If Modifier Held
20\Command=copyq: (plugins.itemtags.hasTag(decodeURIComponent('bash')) ? plugins.itemtags.untag : plugins.itemtags.tag)(decodeURIComponent('bash'))
20\Icon=\xf02b
20\InMenu=true
20\InternalId=copyq_tags_tag:bash
20\Name=Toggle Tag \x201c\x62\x61sh\x201d
3\Command="/**\n * Cycles through and pastes the next item in the list sequentially.\n * This function is designed for efficient sequential pasting of items.\n *\n * Usage:\n * - Bind `copyq pasteNext` to a global shortcut, such as Super+V.\n * - Copy multiple items in sequence.\n * - Press Super+V repeatedly to paste each item in turn.\n */\n\nglobal.pasteNext = function () {\n    const items = selectedItems();\n    if (items.length != 1) return;\n    const ix = items[0];\n\n    tab(selectedtab())\n    if (ix === 0) {\n        print(\"Pasting first item\");\n        paste();\n        selectItems([ix + 1]);\n        return;\n    }\n    print(`Selecting index ${ix + 1}`);\n    selectItems([ix + 1]);\n    item = selectedItemsData()[0]\n    copy(item)\n    paste()\n}\n\n"
3\GlobalShortcut=alt+shift+v
3\Icon=\xe4bb
3\IsGlobalShortcut=true
3\IsScript=true
3\Name=Paste Next
4\Command="// Pops up the main window (if the shortcut is pressed once)\n// If the shortcut is pressed again, walks through the list\n// and immediately activates the selected item when releeased.\n\n// Bind shortcuts similar to:\n// - Super+Q = copyq cycle false\n// - Super+Shift+Q = copyq cycle true\n\nglobal.cycle = function(oppositeDirection) {\n    if (focused()) {\n        const sel = ItemSelection().current();\n        const rows = sel.rows();\n        var direction = Number(settings('cycleItemsSelectDirection'));\n\n        // Toggle direction based on the oppositeDirection flag\n        direction = oppositeDirection ? -direction : direction;\n\n        var row = rows.length > 0 ? (rows[0] + direction) : 0;\n        if (row < 0 || row >= length()) {\n            row = (rows.length > 0) ? (rows[0] + direction) : 0; // ensure row recalculates correctly\n        }\n        settings('cycleItemsSelectedRow', row);\n        settings('cycleItemsSelectedTab', selectedTab());\n        selectItems(row);\n    } else {\n        settings('cycleItemsSelectedRow', -1);\n        settings('cycleItemsSelectDirection', 1);\n        show();\n        // Wait for shortcut modifiers to be released.\n        while (queryKeyboardModifiers().length > 0) {\n            sleep(20);\n        }\n        const row = settings('cycleItemsSelectedRow');\n        if (row != -1) {\n            tab(settings('cycleItemsSelectedTab'));\n            select(row);\n            hide();\n            // uncomment this to also paste:'cycleItemsSelectDirection'// uncomment this to also paste\n            // paste()\n        }\n    }\n};\n"
4\Icon=\xf1b8
4\IsScript=true
4\Name=Cycle Items
5\Command="/**\n * Uploads content to either a Markdown or code sharing service based on the specified type.\n * - Checks existing tags to avoid duplicate uploads.\n * - Trims all tags to remove leading or trailing whitespace.\n * - Handles uploading to different endpoints based on the content type.\n * @param {string} type - The type of the content to upload, either 'code' or 'markdown'.\n */\nglobal.upload = function(type = \"code\") {\n    const row = currentItem();\n    const currentTags = getTags(row);\n\n    // Check if a markdown or hastebin link already exists in the tags\n    const existingLink = findExistingLink(currentTags);\n    if (existingLink) return;  // Exit if a link already exists\n\n    const itemText = getItemText(row);\n    let responseParsed;\n    if (type == 'markdown') {\n        responseParsed = postMarkdown(itemText);\n    } else if (type == 'code') {\n        responseParsed = postCode(itemText);\n    }\n\n    // Handle response and process the link\n    if (handleResponseErrors(responseParsed)) {\n        const link = processLink(responseParsed, type);\n        updateTagAndCopyLink(row, link, type);\n    }\n};\n\nfunction getTags(row) {\n    return str(read(\"application/x-copyq-tags\", row)).split(\",\")\n           .map(tag => tag.trim());  // Trim each tag to remove any leading or trailing whitespace\n}\n\nfunction findExistingLink(tags) {\n    return tags.find(tag => tag.startsWith(\"Markdown: \") || tag.startsWith(\"Hastebin: \"));\n}\n\nfunction getItemText(row) {\n    return str(read(row));\n}\n\nfunction postMarkdown(bodyText) {\n    const endpoint = \"https://paper.wf/api/posts\";\n    const postData = JSON.stringify({ \"body\": bodyText });\n    const headers = [\n        \"-H\", \"Content-Type: application/json\",\n        \"-H\", \"Authorization: Token 1afc5558-f587-4012-4e93-1d33a16df8d5\"\n    ];\n    const response = execute(\"curl\", \"-s\", \"-X\", \"POST\", endpoint, ...headers, \"-d\", postData);\n    return JSON.parse(str(response.stdout));\n}\n\nfunction postCode(bodyText) {\n    const endpoint = \"https://haste.zneix.eu/documents\";\n    const headers = [\"-H\", \"User-Agent: haste-client/1.2\"];\n    const response = execute(\"curl\", \"-s\", \"-X\", \"POST\", endpoint, ...headers, \"--data\", bodyText);\n    const jsonResponse = JSON.parse(str(response.stdout));\n    return { data: { url: `https://haste.zneix.eu/${jsonResponse.key}` } };\n}\n\nfunction handleResponseErrors(response) {\n    if (response.exit_code || response.stderr || response.error) {\n        const errorMessage = `Failed to upload post: ${response.stderr} ${response.error}`;\n        popup(errorMessage);\n        abort();\n        return false;\n    }\n    return true;\n}\n\nfunction processLink(response, type) {\n    // Return the URL directly from the response data\n    return response.data.url;\n}\n\nfunction updateTagAndCopyLink(row, link, type) {\n    const prefix = type === 'code' ? 'Hastebin: ' : 'Markdown: ';\n    const tagData = `${prefix}${link}`;\n    \n    const currentData = str(read(\"application/x-copyq-tags\", row));\n    setData(\"application/x-copyq-tags\", `${currentData},${tagData}`, row);\n    copy(link);\n}\n"
5\Icon=\xf15b
5\IsScript=true
5\Name=Upload to Write.as or Hastebin
6\Command="global.codeblock = function(mode = 'copy') {\n    // Step 1: Check the clipboard content\n    var contents = str(clipboard());\n    if (!contents || (contents.trim().startsWith(\"```\") && contents.trim().endsWith(\"```\"))) {\n        abort();\n    }\n\n    function escapeSpecialChars(str) {\n        return str.replace(/`/g, \"`\");\n    }\n\n    // Step 3: Remove extra indentation and show the result\n    function removeExtraIndentation(text) {\n        const lines = text.split(\"\\n\");\n        const nonEmptyLines = lines.filter(line => line.trim() !== \"\");\n        \n        const minIndentation = Math.min(...nonEmptyLines.map(line => {\n            const leadingSpaces = line.match(/^\\s*/)[0].length;\n            return leadingSpaces;\n        }));\n\n        return lines.map(line => line.substring(minIndentation)).join(\"\\n\");\n    }\n\n    contents = removeExtraIndentation(contents);\n    contents = escapeSpecialChars(contents);\n    const language = detectLanguage(contents);\n    const formattedText = `\\`\\`\\`${language}\\n${contents}\\n\\`\\`\\``;\n\n    // Replaces the last clipboard contents with the codeblocked contents permanently\n    if (mode == \"replace\") {\n        remove(index());\n        add(formattedText);\n        write(index(), formattedText);\n    }\n\n    copy(formattedText);\n    copySelection(formattedText)\n};\n"
6\Icon=\xf06b
6\IsScript=true
6\Name=Wrap with Code Block
7\Command="copyq:\nvar selectedItem1 = selectedItemData(0)[mimeText]\nvar selectedItem2 = selectedItemData(1)[mimeText]\n\nvar item1 = null\nvar item2 = null\n\nif (selectedItem2 == undefined) {\n    // the selected item either doesn't contain text\n    // or the command is run as global shortcut.\n    // select the last two clipboard in this case.\n    item1 = read(1)\n    item2 = read(0)\n} else {\n    item1 = selectedItem1\n    item2 = selectedItem2\n}\n\nfunction tempFile(content) {\n    var file = new TemporaryFile()\n    file.openWriteOnly()\n    file.write(content)\n    file.close()\n    return file\n}\n\nvar f1 = tempFile(item1)\nvar f2 = tempFile(item2)\nvar name1 = f1.fileName()\nvar name2 = f2.fileName()\n\nexecute('meld', name1, name2)\n\nsleep(100)"
7\Icon=\xf0db
7\InMenu=true
7\Name=Diff Selected Items
8\Command="copyq:\nvar itemsToDelete = 100;\n\n// Create a selection of all items in the current tab\nvar sel = ItemSelection(selectedTab()).selectAll();\n\n// Get all items and their sizes\nvar items = sel.items();\nvar itemSizes = items.map(function(item, index) {\n    return {\n        index: index,\n        size: str(item[mimeText]).length\n    };\n});\n\n// Sort items by size (descending)\nitemSizes.sort(function(a, b) {\n    return b.size - a.size;\n});\n\n// Select and remove the largest 100 items\nvar largestItemsSel = ItemSelection(selectedTab());\nfor (var i = 0; i < Math.min(itemsToDelete, itemSizes.length); i++) {\n    select(itemSizes[i].index);\n}\nlargestItemsSel.removeAll();\n\n// Print the number of removed items\npopu(\"Removed \" + selection.length + \" largest items.\");"
8\Icon=\xef\xbf\xbd\x34\x36
8\InMenu=true
8\Name=Delete 200 Biggest Items
9\Command="copyq:\nvar color = 'rgba(255, 255, 0, 1)'\nvar currentColor = str(selectedItemData(0)[mimeColor]);\nif (currentColor != color) {\n    setData(mimeColor, color)\n} else {\n    removeData(mimeColor)\n}"
9\Enable=false
9\Icon=\xf591
9\InMenu=true
9\MatchCommand="copyq:\nvar color = 'rgba(255, 255, 0, 0.5)'\nvar currentColor = str(selectedItemData(0)[mimeColor])\nif (currentColor != color) {\n    menuItem['text'] = 'Mark Items'\n    menuItem['tag'] = '__'\n    menuItem['color'] = color.replace(/\\d+\\.\\d+/, 1)\n} else {\n    menuItem['text'] = 'Unmark Items'\n    menuItem['tag'] = 'x'\n    menuItem['color'] = 'white'\n}\nmenuItem['icon'] = '\xf591'"
9\Name=Highlight Items
9\Shortcut=f1
size=20
