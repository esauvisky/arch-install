#!/usr/bin/env bash

## Node Versioning Manager
# if [[ $PWD =~ .*[sS]pongy-{0,1}.* ]]; then
#     source /usr/share/nvm/init-nvm.sh
#     nvm use lts/carbon
# fi

# MagicCD
alias cdc='_magicCD 2 $HOME/Coding/'
alias cdp='_magicCD 2 $HOME/Pokemod/'

# cool_places+=(

#     )

# NVM
# [[ -f "/usr/share/nvm/init-nvm.sh" ]] && source /usr/share/nvm/init-nvm.sh

# Uses open-subl3 instead of plain subl3 (so it doesn't changes workspaces if there's an instance already opened)
alias subl='subl3open'
alias subl3='subl3open'


# Fixes kitty on ssh
# if [[ $(is_ssh) && $TERM == "xterm-kitty" ]]; then
#     export TERM=xterm
# fi

## Dangerous stuff that interferes with scripts
## Put these at the end of your .bashrc preferably so it doesn't
## intereferes with anything that is being done there.
# Allows non case-sensitive wildcard globs (*, ?):
shopt -s nocaseglob
# Allows extended wildcard globs
shopt -s extglob
# Enables the ** glob
shopt -s globstar


## WIP:
# function cd() {
#     # readarray -d '' results < <(find . -maxdepth 1 -path "*node_modules*" -prune -o -type d -print0)
#     # readarray results < <(ls -x -w1)
#     readarray -d '' results < <(find "${1}/" -maxdepth 1 -path "*node_modules*" -prune -o -type d -print0)

#     # echo "${results[@]}"
#     if [[ ${#results[@]} -ge 2 && ${#results[@]} -lt 20 ]]; then
#         # Let the user choose
#         select_option "${results[@]}"
#         local option="${results[$?]}"
#         if [[ "$option" != '.' ]]; then
#             echo "$option"
#             cd "$option"
#             # cd "${results[$?]}"
#         else
#             echo "$option"
#             builtin cd "${1}"
#         fi
#     fi
#     builtin cd "${1}"
# }

# Adds coloring output for the rest of the shit
# BREAKS AUTOCOMPLETION OF ALIASES (like systemctl 'start' or 'st')
# if [[ -d ~/.grc/ ]]; then
#     for i in ~/.grc/*; do
#         if [[ ${i//*\//} != "grc.conf" && ! $(alias "${i##*conf.}" 2>/dev/null) ]]; then
#             alias "${i##*conf.}=$GRC -c ${i} ${i##*conf.}"
#         fi
#     done
# fi

# source <(cod init $$ bash)
# function __cod_complete_bash() {
# 	$cod_enable_trace && __cod_ref_trace

# 	# First we want to get file completions.

# 	local FILTEROPT
# 	if [ -z "$2" ] ; then
# 		# If user trying to complete empty string we want to filter out dot files.
# 		FILTEROPT='.*'
# 	fi

# 	# local FILE_COMPLETIONS
# 	local COD_COMPLETIONS
# 	# Generate file completions
# 	#readarray -t FILE_COMPLETIONS < <(compgen -f -X "$FILTEROPT" -- "$2")

# 	# Generate cod completions.
# 	readarray -t COD_COMPLETIONS < <(command $__COD_BINARY api complete-words -- $$ "$COMP_CWORD" "${COMP_WORDS[@]}" 2> /dev/null)

# 	COMPREPLY=("${COD_COMPLETIONS[@]}")

# 	local NAME
# 	local ONLY_EQ=true
# 	# Now we don't want bash to add trailing space for options that end with '='
# 	for NAME in "${COD_COMPLETIONS[@]}" ; do
# 		if [ "${NAME: -1}" != "=" ] ; then
# 			ONLY_EQ=false
# 			break
# 		fi
# 	done

# 	if $ONLY_EQ ; then
# 		compopt -o nospace
# 	fi

# 	$cod_enable_trace && __cod_unref_trace
# 	return 0
# }

## Allows zsh-style completion for dirs
## Example:
##     cd /u/s/*comp[TAB]
# _bcpp --dirs --nocase --cooperate --files
#complete -F _bcpp_complete_dir rmdir
