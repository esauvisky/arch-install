#!/usr/bin/env bash
#
# bash-complete-partial-path                                    v1.0.0
#
# Zsh-like expansion of incomplete file paths for Bash.
# Source this file from your ~/.bashrc and use `_bcpp --defaults`
# to enable the described behavior.
#
# Example: `/u/s/a<Tab>` will be expanded into `/usr/share/applications`
#
# https://github.com/sio/bash-complete-partial-path
#

# Copyright 2018-2019 Vitaly Potyarkin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Detect sed binary once at load time
#
_bcpp_sed_detect() {
    local SED GNU_SED
    SED="sed"
    GNU_SED="gsed" # macOS ships BSD sed by default, gnu-sed has to be installed with brew
    if [[ $OSTYPE == darwin* || $OSTYPE == freebsd* ]]; then
        if type "$GNU_SED" &>/dev/null; then
            SED="$GNU_SED"
        else
            echo "bash-complete-partial-path: Please install GNU sed (gsed)" >&2
        fi
    fi
    echo "command $SED"
}

#
# Take a single incomplete path and fill it with wildcards
# e.g. /u/s/app/ -> /u*/s*/app*
#
_bcpp_put_wildcards() {
    local PROCESSED TILDE_EXPANSION INPUT

    INPUT="$@"
    PROCESSED=$(
        echo "$INPUT" |
            $_BCPP_SED \
                -Ee 's:([^\*\~])/:\1*/:g;
                s:([^\/\*])$:\1*:g;
                s:^(\~[^\/]*)\*\/:\1/:;
                s:(\.+)\*/:\1/:g;
                s:(^|/)(\$[^/]+)\*(/|$):\2\3:g'
    )
    eval "TILDE_EXPANSION=$(
        printf \
            '%q' \
            "$PROCESSED" | $_BCPP_SED -e 's:^\\\~:~:g' -Ee 's:(^|/)\\(\$):\1\2:g'
    )"

    # Workaround for Mingw pseudo directories for drives,
    # i.e. `/c/` refers to drive `C:\`, but glob `/c*/` returns no matches
    if [[ "$INPUT" =~ ^\/[a-zA-Z]\/.* && -d "${INPUT::2}" ]]; then
        TILDE_EXPANSION="${TILDE_EXPANSION::2}${TILDE_EXPANSION:3}"
    fi

    echo "$TILDE_EXPANSION"
}

# Run a job in background without printing job control messages and without a
# subshell
# https://stackoverflow.com/a/51061046
_bcpp_silent_bg() {
    { "$@" 2>&3 & } 3>&2 2>/dev/null
    builtin disown &>/dev/null # Prevent whine if job has already completed
    return 0                   # do not clutter $? value (last exit code)
}

# Helper function for wrapping compgen output to named pipe
_bcpp_compgen() {
    local wildcards="$1"
    local pipe="$2"
    compgen -G "$wildcards" "$wildcards" 2>/dev/null >"$pipe"
}

#
# Bash completion function for expanding partial paths
#
# This is a generic worker. It accepts 'file' or 'directory' as the first
# argument to specify desired completion behavior
#
_bcpp_complete() {
    local WILDCARDS ACTION LINE OPTION INPUT QUOTE

    ACTION="$1"
    if [[ "_$1" == "_-d" ]]; then # _filedir compatibility
        ACTION="directory"
    fi
    if [[ "$COMP_CWORD" -ge 0 ]]; then
        INPUT="${COMP_WORDS[$COMP_CWORD]}"
    else
        INPUT=""
    fi

    # Detect and strip opened quotes
    if [[ "${INPUT:0:1}" == "'" || "${INPUT:0:1}" == '"' ]]; then
        QUOTE="${INPUT:0:1}"
        INPUT="${INPUT:1}"
    else
        QUOTE=""
    fi

    # Prepare the reply
    COMPREPLY=()
    compopt -o nospace
    compopt -o bashdefault
    compopt -o default

    # If input is already a valid path, do not try to be clever
    if [[ -e "$INPUT" || "$INPUT" == "" ]]; then
        if [[ "_$ACTION" == "_directory" ]]; then
            OPTION="dirnames"
        else
            OPTION="filenames"
        fi
        if [[ -d "$INPUT" && "${INPUT: -1}" != '/' ]]; then
            COMPREPLY=("$INPUT/")
        else
            COMPREPLY=($(compgen -o "$OPTION" "$INPUT"))
        fi
        return
    fi

    # Add wildcards to each path element
    WILDCARDS=$(_bcpp_put_wildcards "$INPUT")

    # Collect completion options
    local pipe
    pipe="$_BCPP_FIFO"
    [[ -z "$pipe" ]] && return 1 # fail on empty filename
    command mkfifo -m 600 "$pipe"

    local monitor
    [[ "$-" == *m* ]] && monitor=yes || monitor=no
    [[ "$monitor" == yes ]] && set +m

    _bcpp_silent_bg _bcpp_compgen "$WILDCARDS" "$pipe"
    while read -r -d $'\n' LINE; do
        if [[ "_$ACTION" == "_directory" && ! -d "$LINE" ]]; then # skip non-directory paths when looking for directory
            continue
        fi
        if [[ -z "$LINE" ]]; then # skip empty suggestions
            continue
        fi
        if [[ -z "$QUOTE" ]]; then # escape special characters unless user has opened a quote
            LINE=$(printf "%q" "$LINE")
        fi
        COMPREPLY+=("$LINE")
    done <"$pipe"
    command rm "$pipe"
    [[ "$monitor" == yes ]] && set -m
}

# Wrappers
_bcpp_complete_dir() { _bcpp_complete directory; }
_bcpp_complete_file() { _bcpp_complete file; }

# Manage enhanced path completion
_bcpp() {
    local DEFAULT ALL KEYS ARG USAGE UNKNOWN

    DEFAULT="--files --dirs --cooperate --nocase --readline"
    ALL="--files --dirs --cooperate --nocase --readline"
    USAGE=(
        "Usage: $FUNCNAME OPTIONS"
        "    Manage enhanced path completion in bash"
        ""
        "Options:"
        "    --defaults"
        "        Enable the subset of features recommended by maintainer."
        "        Currently equals to:"
        "        \"$DEFAULT\""
        "    --all"
        "        Enable all optional features. Equals to:"
        "        \"$ALL\""
        "    --help"
        "        Show this help message"
        ""
        "Individual feature flags:"
        "    --files"
        "        Enable enhanced completion for file paths"
        "    --dirs"
        "        Complete \`cd\` with paths to directories only"
        "    --cooperate"
        "        Cooperate with system-wide bash-completion if it's in use."
        "        This function must be invoked AFTER the main bash-completion"
        "        is loaded."
        "        Deprecated alias: --override"
        "    --nocase"
        "        Make path completion case insensitive"
        "    --readline"
        "        Configure readline for better user experience. Equals to:"
        "        \"--readline-menu --readline-color --readline-misc\""
        "    --readline-color"
        "        Enable colors in completion"
        "    --readline-menu"
        "        Use \`menu-complete\` when Tab key is pressed instead of default"
        "        \`complete\`. Use Shift+Tab to return to previous suggestion"
        "    --readline-misc"
        "        Other useful readline tweaks"
        ""
        "Copyright 2018-2019 Vitaly Potyarkin"
        "<https://github.com/sio/bash-complete-partial-path>"
        ""
        "This program is Free Software and comes with ABSOLUTELY NO WARRANTY,"
        "to the extent permitted by applicable law. For more information see:"
        "<http://www.apache.org/licenses/LICENSE-2.0>"
    )

    # Modify selected features list
    for ARG in "$@"; do
        case "$ARG" in
        --defaults)
            set -- "$@" $DEFAULT
            ;;
        --all)
            set -- "$@" $ALL
            ;;
        esac
    done

    # Detect selected features
    KEYS=""
    for ARG in "$@"; do
        case "$ARG" in
        --files)
            KEYS="${KEYS}f"
            ;;
        --dirs)
            KEYS="${KEYS}d"
            ;;
        --cooperate | --override)
            KEYS="${KEYS}o"
            ;;
        --nocase)
            KEYS="${KEYS}c"
            ;;
        --readline)
            KEYS="${KEYS}mlr"
            ;;
        --readline-menu)
            KEYS="${KEYS}m"
            ;;
        --readline-color)
            KEYS="${KEYS}l"
            ;;
        --readline-misc)
            KEYS="${KEYS}r"
            ;;
        --help | --usage | -h)
            KEYS="${KEYS}H"
            ;;
        --defaults | --all) ;;

        *)
            KEYS="${KEYS}U"
            UNKNOWN+=("$ARG")
            ;;
        esac
    done

    # Special cases that terminate function
    if [[ "$KEYS" == *H* || -z "$@" ]]; then # --help|--usage|-h
        printf "%s\n" "${USAGE[@]}"
        return 0
    fi
    if [[ "$KEYS" == *U* ]]; then # unknown arguments
        echo -e \
            "Unknown arguments: ${UNKNOWN[@]}" \
            "\nRefer to \`$FUNCNAME --help\` for more information" \
            >&2
        return 1
    fi

    # Enable selected functionality. The order of execution does not depend on
    # the order of command line parameters
    if [[ "$KEYS" == *o* ]]; then # --cooperate|--override
        local DYNAMIC
        DYNAMIC=$(complete -p | grep -E -- '-D.*_completion_loader|_completion_loader.*-D')

        local _bcpp_filedir_original_code
        _bcpp_filedir_original_code=$(declare -f _filedir | tail -n+2)
        if [[ ! -z "$_bcpp_filedir_original_code" ]]; then
            type _bcpp_filedir_original &>/dev/null ||
                eval "_bcpp_filedir_original() $_bcpp_filedir_original_code"
            _filedir() {
                _bcpp_filedir_original "$@"
                [ "${#COMPREPLY[@]}" -eq 0 ] && _bcpp_complete "$@"
            }
        fi

        local _bcpp_filedir_xspec_original_code
        _bcpp_filedir_xspec_original_code=$(declare -f _filedir_xspec | tail -n+2)
        if [[ ! -z "$_bcpp_filedir_xspec_original_code" ]]; then
            type _bcpp_filedir_xspec_original &>/dev/null ||
                eval "_bcpp_filedir_xspec_original() $_bcpp_filedir_xspec_original_code"
            _filedir_xspec() {
                _bcpp_filedir_xspec_original "$@"
                [ "${#COMPREPLY[@]}" -eq 0 ] && _bcpp_complete "$@"
            }
        fi
    fi
    if [[ "$KEYS" == *f* ]]; then # --files
        # Do not overwrite default completion function if dynamic completion
        # loader is enabled
        [[ -z "$DYNAMIC" ]] && complete -D -F _bcpp_complete_file
    fi
    if [[ "$KEYS" == *d* ]]; then # --dirs
        complete -F _bcpp_complete_dir cd
        complete -F _bcpp_complete_dir pushd
    fi
    if [[ "$KEYS" == *c* ]]; then # --nocase
        shopt -s nocaseglob
        bind 'set completion-ignore-case on'
    fi
    if [[ "$KEYS" == *m* ]]; then # --readline-menu
        bind 'TAB:menu-complete'
        bind '"\e[Z": menu-complete-backward' # Shift+Tab
        bind 'set menu-complete-display-prefix on'
    fi
    if [[ "$KEYS" == *l* ]]; then # --readline-color
        bind 'set colored-completion-prefix on'
        bind 'set colored-stats on'
    fi
    if [[ "$KEYS" == *r* ]]; then # --readline-misc
        bind 'set show-all-if-ambiguous on'
        bind 'set show-all-if-unmodified on'
    fi

    # Calculate location for fifo file
    _BCPP_FIFO=$(mktemp -u --tmpdir 'bcpp_pipe_XXXXXXXX' 2>/dev/null || mktemp -u -t 'bcpp_pipe')

    # Detect sed command
    _BCPP_SED=$(_bcpp_sed_detect)
}

##  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
##  programmable completion function for shell aliases;
##  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

##  ============================================================================
##  Copyright (C) 2016-2018 Cyker Way
##
##  This program is free software: you can redistribute it and/or modify it
##  under the terms of the GNU General Public License as published by the Free
##  Software Foundation, either version 3 of the License, or (at your option)
##  any later version.
##
##  This program is distributed in the hope that it will be useful, but WITHOUT
##  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
##  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
##  more details.
##
##  You should have received a copy of the GNU General Public License along with
##  this program.  If not, see <http://www.gnu.org/licenses/>.
##  ============================================================================

##  ============================================================================
##  variable;
##  ============================================================================

##  register for keeping function return value;
_retval=

##  refcnt for alias expansion; expand aliases iff `_refcnt == 0`;
_refcnt=0

##  ============================================================================
##  function;
##  ============================================================================

##  debug;
_debug() {
    echo
    echo "#COMP_WORDS=${#COMP_WORDS[@]}"
    echo "COMP_WORDS=("
    for x in "${COMP_WORDS[@]}"; do
        echo "'$x'"
    done
    echo ")"
    echo "COMP_CWORD=${COMP_CWORD}"
    echo "COMP_LINE='${COMP_LINE}'"
    echo "COMP_POINT=${COMP_POINT}"
    echo
}

##  test whether element is in array;
##
##  $@
##  :   ( elem arr[0] arr[1] ... )
_inarr() {
    for e in "${@:2}"; do
        [[ "$e" == "$1" ]] && return 0
    done
    return 1
}

##  split command line into words;
##
##  $1
##  :   command line string;
_split_cmd_line() {
    ##  command line string;
    local str="$1"

    ##  an array that will contain words after split;
    local words=()

    ##  alloc a temp stack to track open and close chars when splitting;
    local sta=()

    ##  examine each char of `str`;
    local i=0 j=0
    for (( ; j < ${#str}; j++)); do
        if ((${#sta[@]} == 0)); then
            if [[ '$(' == "${str:j:2}" ]]; then
                sta+=(')')
                ((j++))
            elif [[ '`' == "${str:j:1}" ]]; then
                sta+=('`')
            elif [[ $'(' == "${str:j:1}" ]]; then
                sta+=(')')
            elif [[ '{' == "${str:j:1}" ]]; then
                sta+=('}')
            elif [[ '"' == "${str:j:1}" ]]; then
                sta+=('"')
            elif [[ "'" == "${str:j:1}" ]]; then
                sta+=("'")
            elif [[ '\$' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\`' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\"' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\\' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ "\'" == "${str:j:2}" ]]; then
                ((j++))
            elif [[ $' \t\n' == *"${str:j:1}"* ]]; then
                ((i < j)) && words+=("${str:i:j-i}")
                ((i = j + 1))
            elif [[ "><=;|&:" == *"${str:j:1}"* ]]; then
                ((i < j)) && words+=("${str:i:j-i}")
                words+=("${str:j:1}")
                ((i = j + 1))
            fi
        elif [[ "${sta[-1]}" == ')' ]]; then
            if [[ ')' == "${str:j:1}" ]]; then
                unset sta[-1]
            elif [[ '$(' == "${str:j:2}" ]]; then
                sta+=(')')
                ((j++))
            elif [[ '`' == "${str:j:1}" ]]; then
                sta+=('`')
            elif [[ $'(' == "${str:j:1}" ]]; then
                sta+=(')')
            elif [[ '{' == "${str:j:1}" ]]; then
                sta+=('}')
            elif [[ '"' == "${str:j:1}" ]]; then
                sta+=('"')
            elif [[ "'" == "${str:j:1}" ]]; then
                sta+=("'")
            elif [[ '\$' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\`' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\"' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\\' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ "\'" == "${str:j:2}" ]]; then
                ((j++))
            fi
        elif [[ "${sta[-1]}" == '}' ]]; then
            if [[ '}' == "${str:j:1}" ]]; then
                unset sta[-1]
            elif [[ '$(' == "${str:j:2}" ]]; then
                sta+=(')')
                ((j++))
            elif [[ '`' == "${str:j:1}" ]]; then
                sta+=('`')
            elif [[ $'(' == "${str:j:1}" ]]; then
                sta+=(')')
            elif [[ '{' == "${str:j:1}" ]]; then
                sta+=('}')
            elif [[ '"' == "${str:j:1}" ]]; then
                sta+=('"')
            elif [[ "'" == "${str:j:1}" ]]; then
                sta+=("'")
            elif [[ '\$' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\`' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\"' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\\' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ "\'" == "${str:j:2}" ]]; then
                ((j++))
            fi
        elif [[ "${sta[-1]}" == '`' ]]; then
            if [[ '`' == "${str:j:1}" ]]; then
                unset sta[-1]
            elif [[ '$(' == "${str:j:2}" ]]; then
                sta+=(')')
                ((j++))
            elif [[ $'(' == "${str:j:1}" ]]; then
                sta+=(')')
            elif [[ '{' == "${str:j:1}" ]]; then
                sta+=('}')
            elif [[ '"' == "${str:j:1}" ]]; then
                sta+=('"')
            elif [[ "'" == "${str:j:1}" ]]; then
                sta+=("'")
            elif [[ '\$' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\`' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\"' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\\' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ "\'" == "${str:j:2}" ]]; then
                ((j++))
            fi
        elif [[ "${sta[-1]}" == "'" ]]; then
            if [[ "'" == "${str:j:1}" ]]; then
                unset sta[-1]
            fi
        elif [[ "${sta[-1]}" == '"' ]]; then
            if [[ '"' == "${str:j:1}" ]]; then
                unset sta[-1]
            elif [[ '$(' == "${str:j:2}" ]]; then
                sta+=(')')
                ((j++))
            elif [[ '`' == "${str:j:1}" ]]; then
                sta+=('`')
            elif [[ '\$' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\`' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\"' == "${str:j:2}" ]]; then
                ((j++))
            elif [[ '\\' == "${str:j:2}" ]]; then
                ((j++))
            fi
        fi
    done

    ##  append the last word;
    ((i < j)) && words+=("${str:i:j-i}")

    ##  unset the temp stack;
    unset sta

    ##  return value;
    _retval=("${words[@]}")
}

##  expand aliases in command line;
##
##  $1
##  :   beg word index;
##  $2
##  :   end word index;
##  $3
##  :   ignored word index (can be null);
##  $4
##  :   number of used aliases;
##  ${@:4}
##  :   used aliases;
##  $?
##  :   difference of `${#COMP_WORDS}` before and after expansion;
_expand_alias() {
    local beg="$1" end="$2" ignore="$3" n_used="$4"
    shift 4
    local used=("${@:1:$n_used}")
    shift "$n_used"

    if (($beg == $end)); then
        ##  case 1: range is empty;
        _retval=0
    elif [[ -n "$ignore" ]] && (($beg == $ignore)); then
        ##  case 2: beg index is ignored; pass it;
        _expand_alias \
            "$(($beg + 1))" \
            "$end" \
            "$ignore" \
            "${#used[@]}" \
            "${used[@]}"
    elif ! alias "${COMP_WORDS[$beg]}" &>/dev/null; then
        ##  case 3: command is not an alias;
        _retval=0
    elif (_inarr "${COMP_WORDS[$beg]}" "${used[@]}"); then
        ##  case 4: command is an used alias;
        _retval=0
    else
        ##  case 5: command is an unused alias;

        ##  get alias name;
        local cmd="${COMP_WORDS[$beg]}"

        ##  get alias body;
        local str0="$(alias "$cmd" | sed -E 's/[^=]*=//' | xargs)"

        ##  split alias body into words;
        _split_cmd_line "$str0"
        local words0=("${_retval[@]}")

        ##  find index range of word `$COMP_WORDS[$beg]` in string `$COMP_LINE`;
        local i=0 j=0
        for ((i = 0; i <= $beg; i++)); do
            for (( ; j <= ${#COMP_LINE}; j++)); do
                [[ "${COMP_LINE:j}" == "${COMP_WORDS[i]}"* ]] && break
            done
            ((i == $beg)) && break
            ((j += ${#COMP_WORDS[i]}))
        done

        ##  now `j` is at the beginning of word `$COMP_WORDS[$beg]`; and we know
        ##  the index range is `[j, j+${#cmd})`; update `$COMP_LINE` and
        ##  `$COMP_POINT`;
        COMP_LINE="${COMP_LINE:0:j}${str0}${COMP_LINE:j+${#cmd}}"
        if (($COMP_POINT < j)); then
            :
        elif (($COMP_POINT < j + ${#cmd})); then
            ##  set current cursor position to the end of replacement string;
            ((COMP_POINT = j + ${#str0}))
        else
            ((COMP_POINT += ${#str0} - ${#cmd}))
        fi

        ##  update `$COMP_WORDS` and `$COMP_CWORD`;
        COMP_WORDS=(
            "${COMP_WORDS[@]:0:beg}"
            "${words0[@]}"
            "${COMP_WORDS[@]:beg+1}"
        )
        if (($COMP_CWORD < $beg)); then
            :
        elif (($COMP_CWORD < $beg + 1)); then
            ##  set current word index to the last of replacement words;
            ((COMP_CWORD = $beg + ${#words0[@]} - 1))
        else
            ((COMP_CWORD += ${#words0[@]} - 1))
        fi

        ##  update `$ignore` if it is not empty; if `$ignore` is not empty, then
        ##  we know it is not equal to `$beg` because we checked that in case 2;
        if [[ -n "$ignore" ]] && (($ignore > $beg)); then
            ((ignore += ${#words0[@]} - 1))
        fi

        ##  recursively expand part 0;
        local used0=("${used[@]}" "$cmd")
        _expand_alias \
            "$beg" \
            "$(($beg + ${#words0[@]}))" \
            "$ignore" \
            "${#used0[@]}" \
            "${used0[@]}"
        local diff0="$_retval"

        ##  recursively expand part 1;
        if [[ -n "$str0" ]] && [[ "${str0: -1}" == ' ' ]]; then
            local used1=("${used[@]}")
            _expand_alias \
                "$(($beg + ${#words0[@]} + $diff0))" \
                "$(($end + ${#words0[@]} - 1 + $diff0))" \
                "$ignore" \
                "${#used1[@]}" \
                "${used1[@]}"
            local diff1="$_retval"
        else
            local diff1=0
        fi

        ##  return value;
        _retval=$((${#words0[@]} - 1 + diff0 + diff1))
    fi
}

##  set a command completion function to the default one; users may edit this
##  function to fit their own needs;
_set_default_completion() {
    local cmd="$1"

    case "$cmd" in
    bind)
        complete -A binding "$cmd"
        ;;
    help)
        complete -A helptopic "$cmd"
        ;;
    set)
        complete -A setopt "$cmd"
        ;;
    shopt)
        complete -A shopt "$cmd"
        ;;
    bg)
        complete -A stopped -P '"%' -S '"' "$cmd"
        ;;
    service)
        complete -F _service "$cmd"
        ;;
    unalias)
        complete -a "$cmd"
        ;;
    builtin)
        complete -b "$cmd"
        ;;
    command | type | which)
        complete -c "$cmd"
        ;;
    fg | jobs | disown)
        complete -j -P '"%' -S '"' "$cmd"
        ;;
    groups | slay | w | sux)
        complete -u "$cmd"
        ;;
    readonly | unset)
        complete -v "$cmd"
        ;;
    traceroute | traceroute6 | tracepath | tracepath6 | fping | fping6 | telnet | rsh | \
        rlogin | ftp | dig | mtr | ssh-installkeys | showmount)
        complete -F _known_hosts "$cmd"
        ;;
    aoss | command | do | else | eval | exec | ltrace | nice | nohup | padsp | then | time | \
        tsocks | vsound | xargs)
        complete -F _command "$cmd"
        ;;
    fakeroot | gksu | gksudo | kdesudo | really)
        complete -F _root_command "$cmd"
        ;;
    a2ps | awk | base64 | bash | bc | bison | cat | chroot | colordiff | cp | csplit | cut | date | \
        df | diff | dir | du | enscript | env | expand | fmt | fold | gperf | grep | grub | head | \
        irb | ld | ldd | less | ln | ls | m4 | md5sum | mkdir | mkfifo | mknod | mv | netstat | nl | \
        nm | objcopy | objdump | od | paste | pr | ptx | readelf | rm | rmdir | sed | seq | \
        sha{,1,224,256,384,512}sum | shar | sort | split | strip | sum | tac | tail | tee | \
        texindex | touch | tr | uname | unexpand | uniq | units | vdir | wc | who)
        complete -F _longopt "$cmd"
        ;;
    *)
        _completion_loader "$cmd"
        ;;
    esac
}

##  programmable completion function for aliases; this is the function to be set
##  with `complete -F`;
_complete_alias() {
    ##  get command;
    local cmd="${COMP_WORDS[0]}"

    ##  we expand aliases only for the original command line (ie: the command
    ##  line after which user pressed `<tab>`); this means we expand aliases
    ##  only in the outmost call of this function; we ensure this by using a
    ##  refcnt and expand aliases iff the refcnt is equal to 0;
    if ((_refcnt == 0)); then

        ##  find index range of word `$COMP_WORDS[$COMP_CWORD]` in string
        ##  `$COMP_LINE`; dont expand this word if `$COMP_POINT` (cursor
        ##  position) lies in this range because the word may be incomplete;
        local i=0 j=0
        for (( ; i <= $COMP_CWORD; i++)); do
            for (( ; j <= ${#COMP_LINE}; j++)); do
                [[ "${COMP_LINE:j}" == "${COMP_WORDS[i]}"* ]] && break
            done
            ((i == $COMP_CWORD)) && break
            ((j += ${#COMP_WORDS[i]}))
        done

        ##  now `j` is at the beginning of word `$COMP_WORDS[$COMP_CWORD]`; and
        ##  we know the index range is `[j, j+${#COMP_WORDS[$COMP_CWORD]}]`; we
        ##  include the right endpoint to cover the case where cursor is at the
        ##  exact end of the word; compare the index range with `$COMP_POINT`;
        if ((j <= $COMP_POINT)) &&
            (($COMP_POINT <= j + ${#COMP_WORDS[$COMP_CWORD]})); then
            local ignore="$COMP_CWORD"
        else
            local ignore=""
        fi

        ##  expand aliases;
        _expand_alias 0 "${#COMP_WORDS[@]}" "$ignore" 0
    fi

    ##  increase refcnt;
    ((_refcnt++))

    ##  since aliases have been fully expanded, we no longer need to consider
    ##  aliases in the resulting command line; so we now set this command
    ##  completion function to the default one (which is alias-agnostic); this
    ##  avoids infinite recursion when a command is aliased to itself (ie:
    ##  `alias ls='ls -a'`);
    _set_default_completion "$cmd"

    ##  do actual completion;
    _command_offset 0

    ##  reset this command completion function to `_complete_alias`;
    complete -F _complete_alias "$cmd"

    ##  decrease refcnt;
    ((_refcnt--))
}

##  ============================================================================
##  complete user-defined aliases;
##
##  uncomment and edit these lines to complete your aliases;
##  ============================================================================

#complete -F _complete_alias myalias1
#complete -F _complete_alias myalias2
